<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oooo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://longxq.github.io/"/>
  <updated>2018-07-07T14:04:55.493Z</updated>
  <id>https://longxq.github.io/</id>
  
  <author>
    <name>龙雄球</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis dynamic strings</title>
    <link href="https://longxq.github.io/2018/07/07/redis2/"/>
    <id>https://longxq.github.io/2018/07/07/redis2/</id>
    <published>2018-07-07T12:06:59.629Z</published>
    <updated>2018-07-07T14:04:55.493Z</updated>
    
    <content type="html"><![CDATA[<p>在讲述其他Redis类型和对象编码前，我们先来看看Redis中最简单的类型String。<br>String是Redis诸多类型中最基本的类型，它是lists，hashes，sets等类型的基本组成部分。<br>我们知道Redis是以key-value方式存储的。所有的Redis keys都是string类型，同时string也是最简单的value类型。<br>接下来我们看看string类型在Redis中是怎么实现的。</p><h2 id="Redis-string的实现"><a href="#Redis-string的实现" class="headerlink" title="Redis string的实现"></a>Redis string的实现</h2><p>一个C结构sdshdr代表一个Redis string: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">long</span> len;  </span><br><span class="line">    <span class="keyword">long</span> <span class="built_in">free</span>;  </span><br><span class="line">    <span class="keyword">char</span> buf[];  </span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>所以我们看到string类型的实现在Redis内部就是一个sdshdr类型。buf字符数组存储真实的字符串数据。len字段存储着buf的长度。free字段存储的buf数组中目前还有多少可用字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *sds;</span><br></pre></td></tr></table></figure><p>在Redis内部还定义了一个sds类型，其实就是一个字符串指针。一个sds对象就是一个指针，这个指针指向一个sdshdr对象的buf部分，也就是Redis<br>string对象的实际数据部分。<br>假设我们新建了一个内容为”hello,world”字符串的redis string，我们来看看他们redis内部是怎么表示的:<br><img src="/images/String.png" alt="Redis string"><br>可以看到stringObj就是一个string对象，p是一个sds对象，指向了stringObj的buf部分。在实际中，我们不直接使用一个string对象，而是间接的使用sds对象来操作string对象，毕竟我们只需要string对象中的真实数据。</p><h2 id="Redis-string类型的对象编码"><a href="#Redis-string类型的对象编码" class="headerlink" title="Redis string类型的对象编码"></a>Redis string类型的对象编码</h2><p>String类型的对象有三种编码方式:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_RAW 0  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_INT 1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_EMBSTR 8</span></span><br></pre></td></tr></table></figure><p>首先我们看第一种编码方式。</p><h3 id="REDIS-ENCODING-RAW"><a href="#REDIS-ENCODING-RAW" class="headerlink" title="REDIS_ENCODING_RAW"></a>REDIS_ENCODING_RAW</h3><p>REDIS_ENCODING_RAW编码方式很简单，其实就是把一个sds对象赋值给robj对象的ptr指针。<br>我们来看看Redis内部是怎么以REDIS_ENCODING_RAW编码方式来存储string对象的:</p><ol><li>首先新建一个robj对象，然后把type设置为REDIS_STRING，把encoidng设置为REDIS_ENCODING_RAW:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robj *stringObj=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(robj));  </span><br><span class="line">    stringObj-&gt;type=REDIS_STRING;  </span><br><span class="line">    stringObj-&gt;encoidng=REDIS_ENCODING_RAW;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>然后新建一个sdshdr对象sh和sds对象p，把实际的数据存储到sh中，并把buf赋值给p。</p></li><li><p>把上面新建的sds对象赋值给stringObj的ptr指针。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObj-&gt;ptr=p;</span><br></pre></td></tr></table></figure><p><img src="/images/REDIS_ENCODING_RAW.png" alt="REDIS_ENCODING_RAW"></p><h3 id="REDIS-ENCODING-INT"><a href="#REDIS-ENCODING-INT" class="headerlink" title="REDIS_ENCODING_INT"></a>REDIS_ENCODING_INT</h3><p>当一串字符串可以转换成整数时候，就用REDIS_ENCODING_INT编码方式来存储这串字符串，这种编码方式是先把字符串转换成整数，然后直接赋值给robj对象的ptr指针，这样就节省了sdshdr结构所占用的内存，而且数据部分也节省了很多内存，以字符串”123456789123456789”为例:</p><ol><li>首先新建了一个robj对象o。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o-&gt;type=REDIS_STRING;  </span><br><span class="line">o-&gt;encoidng=REDIS_ENCOIDNG_INT;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后把字符串转换成整数p，以”123456789123456789”为例就是:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> p=<span class="number">123456789123456789</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>直接把p赋值给o-&gt;ptr，而不是新建sdshdr对象:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o-&gt;ptr=(<span class="keyword">void</span>*)p;</span><br></pre></td></tr></table></figure><p><img src="/images/REDIS_ENCODING_INT.png" alt="REDIS_ENCODING_INT">  </p><p>我们可以看到这样可以节省很多内存。</p><h3 id="REDIS-ENCODING-EMBSTR"><a href="#REDIS-ENCODING-EMBSTR" class="headerlink" title="REDIS_ENCODING_EMBSTR"></a>REDIS_ENCODING_EMBSTR</h3><p>顾名思义这种编码方式就是把sdshdr对象内嵌到robj对象中，使他们形成一个整体。  </p><p><img src="/images/REDIS_ENCODING_EMBSTR.png" alt="REDIS_ENCODING_EMBSTR"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在讲述其他Redis类型和对象编码前，我们先来看看Redis中最简单的类型String。&lt;br&gt;String是Redis诸多类型中最基本的类型，它是lists，hashes，sets等类型的基本组成部分。&lt;br&gt;我们知道Redis是以key-value方式存储的。所有的Re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis对象系统</title>
    <link href="https://longxq.github.io/2018/07/07/redis1/"/>
    <id>https://longxq.github.io/2018/07/07/redis1/</id>
    <published>2018-07-07T10:27:59.830Z</published>
    <updated>2018-07-07T13:57:42.539Z</updated>
    
    <content type="html"><![CDATA[<p>redis是什么？移步<a href="www.redis.io">redis官网</a>。<br>redis支持的数据结构类型有很多，从简单的strings，到hashes，lists，sets，sorted<br>sets等。那么redis内部是怎么组织数据的呢？本文的目的就是梳理redis内部数据结构的实现方式，看看数据在redis内部是怎么存储的。</p><a id="more"></a><h3 id="redis对象"><a href="#redis对象" class="headerlink" title="redis对象"></a>redis对象</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span>  </span><br><span class="line"><span class="keyword">unsigned</span> type:<span class="number">4</span>;  </span><br><span class="line"><span class="keyword">unsigned</span> encoding:<span class="number">4</span>;  </span><br><span class="line"><span class="keyword">unsigned</span> lru:REDIS_LRU_BITS;    <span class="comment">/* 和LRU算法相关的字段(先可以不关注这个字段) */</span>  </span><br><span class="line"><span class="keyword">int</span> refcount;    <span class="comment">/* 引用次数，因为一个对象可能会被共享 */</span>  </span><br><span class="line"><span class="keyword">void</span> *ptr;  </span><br><span class="line">&#125;robj;</span><br></pre></td></tr></table></figure><p>一个redis对象就是一个robj对象。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_STRING 0  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LIST 1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_SET 2  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ZSET 3  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_HASH 4</span></span><br></pre></td></tr></table></figure><p>假如我们在一个robj对象内存储的是数据结构类型为string的对象，那么type就是REDIS_STRING，表示这个robj对象代表一个string类型的对象，而实际的这个string类型的对象由robj结构体中的ptr指针指向。假如是一个list对象，那么type字段的就是REDIS_LIST，表示这个robj对象代表一个list类型的对象，而实际的这个list类型的对象由ptr指针指向。</p><h3 id="对象编码"><a href="#对象编码" class="headerlink" title="对象编码"></a>对象编码</h3><p>现在我们要新建一个由val1，val2和val3组成的list。那么redis是如何实现的呢？首先当然是创建一个robj对象，并且把type赋值为REDIS_LIST，引用计数设置为1。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robj *listObj=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(robj));  </span><br><span class="line">listObj-&gt;type=REDIS_LIST;  </span><br><span class="line">listObj-&gt;ref=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>那么redis内部是怎么表示这个由val1,val2,val3组成的list的呢？常规的方法可能是下面这样组织的:<br><img src="/images/list1.png" alt="list1"><br>我们也可以以数组的形式存储这个list:<br><img src="/images/list2.png" alt="list2"><br>这两种构造list的方式就是两种针对list类型对象的编码。对象的编码其实就是数据的组织方式，比如这里的list对象的数据组织既可以用链表的形式组织，也可以用数组的形式组织。为了知道当前对象是怎么编码的，我们把编码的代号赋值给robj结构的encoding字段。我们把第一种编码叫做NORMAL_LIST，第二种叫做ARRAY_LIST。当然redis内部是没有这两种编码的，在这里只是为了解释什么是对象编码。下面就是redis目前支持的编码种类，这些编码方式都是结合了性能和存储效率这两方面的。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_RAW 0    <span class="comment">/* Raw representation */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_INT 1    <span class="comment">/* 编码为整数 */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_HT 2     <span class="comment">/* 编码为hash table */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_ZIPMAP 3    <span class="comment">/* 编码为zipmap */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_LINKEDLIST 4    <span class="comment">/* 编码为普通的linked list */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_ZIPLIST 5    <span class="comment">/* 编码为ziplist */</span>      </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_INTSET 6    <span class="comment">/* 编码为intset */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_SKIPLIST 7    <span class="comment">/* 编码为skiplist */</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_ENCODING_EMBSTR 8    <span class="comment">/*编码为嵌入的sds string */</span></span></span><br></pre></td></tr></table></figure><p>接下来的一系列文章都会一一讲解这些编码方式，看看redis内部是怎么实现对象的存储的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis是什么？移步&lt;a href=&quot;www.redis.io&quot;&gt;redis官网&lt;/a&gt;。&lt;br&gt;redis支持的数据结构类型有很多，从简单的strings，到hashes，lists，sets，sorted&lt;br&gt;sets等。那么redis内部是怎么组织数据的呢？本文的目的就是梳理redis内部数据结构的实现方式，看看数据在redis内部是怎么存储的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
