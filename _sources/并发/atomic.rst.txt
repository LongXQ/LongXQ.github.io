多核处理器的支持：原子性
============================

.. note::

    我们以X86/64体系结构作为讨论对象。

.. graphviz::

   digraph atomic1 {
       A [label="线程1"]
       B [label="线程2"]
       C [shape = "record" label=" | ... | | <f1> a | | ... |" xlabel="内存"]
       A -> C:f1 [label="a=a+1"]
       B -> C:f1 [label="a=a+2"]
   }

在多核处理器下，两个或多个线程可能在不同核上同时写相同的内存地址，如上图例子中两个线程的操作都是先读取a在内存中的值，
然后加上一个值，在写回内存中，因为这个操作不是原子性的，所以可能存在线程1在读取a的值之后，在没加1之前，a在内存中的值可能已经被在其他核上
执行的线程2改变了，此时线程1用了一个旧值加1然后写回内存中覆盖了线程2更新的a的值。

针对需要原子性的操作的场景，处理器提供了原子操作的支持。

在x86处理器中，这类原子性的操作被叫做
**locked atomic operation**，
这些操作典型应用就是保护共享数据结构，处理器提供了三种机制实现这些操作。

1. Guarateed atomic operation（有保证的原子操作）
2. Bus locking（锁住总线的原子操作）
3. Cache coherency protocols（缓存一致性协议）

Guarateed atomic operation
------------------------------------

现代x86/64处理器保证了下面的基础操作都是原子的：
    
1. 读或写一个byte(1字节)
2. 读或写一个16位对齐的word(2字节)
3. 读或写一个32位对齐的doubleword(4字节)
4. 读或写一个64位对齐的quadword(8字节)

这些操作都是被处理器自动原子地执行的，所以才叫做
**Guarateed atomic operation**。

::

    所以a=1是原子操作。

.. important::

    对齐原因是通过数据总线能够在一个总线周期内访问到数据。如果没有对齐，可能一次访问需要多个周期。

Bus locking
----------------

除了基础操作是原子性的之外，处理器还提供了一个LOCK#信号用来锁住系统总线实现原子操作。
当存在有竞争的内存操作的时候，一个线程先发送LOCK信号锁住总线取得总线使用权，那么其他核上执行的线程或其他总线设备的锁住总线请求就会被阻塞，通过锁住总线的
方式阻塞其他未取得总线使用权的线程的操作，从而实现原子操作。

.. note::

    有的处理器体系结构不管操作的内存有没有被L1、L2、L3三级缓存结构缓存，都是锁住内存总线。
    有的处理器体系结构在操作的内存被缓存的情况下，只会锁住缓存总线（cache line，缓存锁）。
    锁总线的方式对性能是有影响的，应为锁住总线会阻塞其他线程对内存的读写操作。

Bus Locking提供了两种机制：

1. 自动锁总线（Automatic locking）
2. 软件控制锁总线（Software Controlled Bus Locking）

Automatic Locking
^^^^^^^^^^^^^^^^^^^^^^^^^

1. 执行
   **XCHG**
   访存指令的时候
2. 设置TSS描述符的B标志位的时候
3. 更新段描述符的时候
4. 更新页目录和页表项的时候
5. 响应中断的时候

以上操作都有LOCK语义，处理器会自动锁总线，所以才叫
**Automatic Locking**。
和我们上层相关的有XCHG指令，其他几项都是操作系统关心的。所以我们可以使用XCHG来实现一些原子操作。

Software Controlled Bus Locking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

除了一些具有LOCK语义的指令操作之外，处理器还提供了显示的方法允许其他一些指令也具有锁住总线的能力。
处理器提供了在一些指令前面显示的加一个LOCK前缀来显示要求锁住总线，使该指令也具有了原子语义，成为了原子操作。

1. 位测试和更改指令(
   **BTS**, 
   **BTR**, 
   **BTC**)
2. 交换指令(
   **XADD**, 
   **CMPXCHG**, 
   **CMPXCHG8B**)
3. LOCK前缀会自动加到
   **XCHG**
   指令上面
4. 单操作数的算数和逻辑运算指令:
   **INC**,
   **DEC**,
   **NOT**
   和
   **NEG**
   指令
5. 两个操作数的算数和逻辑运算指令:
   **ADD**,
   **ADC**,
   **SUB**,
   **SBB**,
   **AND**,
   **OR**
   和
   **XOR**
   指令

.. important::

    Bus Locking对内存地址对齐没有要求，如果一个指令需要多个总线周期才能完成，也不影响原子性，
    因为总线都被锁住了，所以对不对齐没有关系，出于对处理器执行性能的考虑，最好还是保持对齐。


Cache coherency protocols
------------------------------

Cache coherency protocols是缓存一致性协议，主要是保证了原子操作的正确性。
当频繁访问的内存被L1或L2、L3缓存结构缓存的时候
处理器往往使用缓存一致性协议来确保原子操作在更新完缓存后，数据会被正确的同步到其他核上缓存了相同内存的缓存中和主存中去
，同时缓存一致性协议保证了不允许缓存了相同数据的两个或多个核同时执行更改被缓存了数据的指令
（就是使用了前面提到的缓存锁cache lock机制）。
保证了在不同核上执行的线程看到的数据是一样的，确保了原子操作的正确性。这种机制对对编程来说是透明的。

举例
-------

以java的hotspot虚拟机实现的原子操作举例。

.. code-block:: c++


    inline D Atomic::PlatformAdd<4>::fetch_and_add(I add_value, D volatile* dest,
                                               atomic_memory_order order) const {
        D old_value;
        __asm__ volatile (  "lock xaddl %0,(%2)"
                    : "=r" (old_value)
                    : "0" (add_value), "r" (dest)
                    : "cc", "memory");
        return old_value;
    }


    inline T Atomic::PlatformXchg<4>::operator()(T exchange_value,
                                        T volatile* dest,
                                        atomic_memory_order order) const {
        __asm__ volatile (  "xchgl (%2),%0"
                    : "=r" (exchange_value)
                    : "0" (exchange_value), "r" (dest)
                    : "memory");
        return exchange_value;
    }

    inline T Atomic::PlatformCmpxchg<1>::operator()(T exchange_value,
                                                T volatile* dest,
                                                T compare_value,
                                                atomic_memory_order /* order */) const {
        STATIC_ASSERT(1 == sizeof(T));
        __asm__ volatile ("lock cmpxchgb %1,(%3)"
                    : "=a" (exchange_value)
                    : "q" (exchange_value), "a" (compare_value), "r" (dest)
                    : "cc", "memory");
        return exchange_value;
    }

    inline T Atomic::PlatformCmpxchg<4>::operator()(T exchange_value,
                                                T volatile* dest,
                                                T compare_value,
                                                atomic_memory_order /* order */) const {
        STATIC_ASSERT(4 == sizeof(T));
        __asm__ volatile ("lock cmpxchgl %1,(%3)"
                    : "=a" (exchange_value)
                    : "r" (exchange_value), "a" (compare_value), "r" (dest)
                    : "cc", "memory");
        return exchange_value;
    }


**参考资料**

`Intel® 64 and IA-32 Architectures Software Developer's Manual Volume 3A: System Programming Guide, Part 1 <https://software.intel.com/en-us/download/intel-64-and-ia-32-architectures-sdm-volume-3a-system-programming-guide-part-1>`_
