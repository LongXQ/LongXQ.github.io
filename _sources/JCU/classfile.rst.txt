class文件
----------------

java源代码在编译后会生成一个class文件，我们使用javap命令可以直观的看class文件内容。

>>> javap -h
用法: javap <options> <classes>
其中, 可能的选项包括:
  -? -h --help -help               输出此帮助消息
  -version                         版本信息
  -v  -verbose                     输出附加信息
  -l                               输出行号和本地变量表
  -public                          仅显示公共类和成员
  -protected                       显示受保护的/公共类和成员
  -package                         显示程序包/受保护的/公共类
                                   和成员 (默认)
  -p  -private                     显示所有类和成员
  -c                               对代码进行反汇编
  -s                               输出内部类型签名
  -sysinfo                         显示正在处理的类的
                                   系统信息 (路径, 大小, 日期, MD5 散列)
  -constants                       显示最终常量
  --module <模块>, -m <模块>       指定包含要反汇编的类的模块
  --module-path <路径>             指定查找应用程序模块的位置
  --system <jdk>                   指定查找系统模块的位置
  --class-path <路径>              指定查找用户类文件的位置
  -classpath <路径>                指定查找用户类文件的位置
  -cp <路径>                       指定查找用户类文件的位置
  -bootclasspath <路径>            覆盖引导类文件的位置


.. code-block:: java

    package com.longxiongqiu;

    public class demo {
        private String name;

        public String getName(){
            System.out.println(name);
            name += "demo";
            return name;
        }
    }

>>> javap -c -v -p demo
Classfile /Users/longxiongqiu/java/out/production/java/com/longxiongqiu/demo.class
  Last modified 2019年3月3日; size 1024 bytes
  MD5 checksum efe137acf2f67d6a72dd25fc85b74153
  Compiled from "demo.java"
public class com.longxiongqiu.demo
  minor version: 0
  major version: 55
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #6                          // com/longxiongqiu/demo
  super_class: #7                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 2, attributes: 3
Constant pool:
   #1 = Methodref          #7.#21         // java/lang/Object."<init>":()V
   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = Fieldref           #6.#24         // com/longxiongqiu/demo.name:Ljava/lang/String;
   #4 = Methodref          #25.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = InvokeDynamic      #0:#30         // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
   #6 = Class              #31            // com/longxiongqiu/demo
   #7 = Class              #32            // java/lang/Object
   #8 = Utf8               name
   #9 = Utf8               Ljava/lang/String;
  #10 = Utf8               <init>
  #11 = Utf8               ()V
  #12 = Utf8               Code
  #13 = Utf8               LineNumberTable
  #14 = Utf8               LocalVariableTable
  #15 = Utf8               this
  #16 = Utf8               Lcom/longxiongqiu/demo;
  #17 = Utf8               getName
  #18 = Utf8               ()Ljava/lang/String;
  #19 = Utf8               SourceFile
  #20 = Utf8               demo.java
  #21 = NameAndType        #10:#11        // "<init>":()V
  #22 = Class              #33            // java/lang/System
  #23 = NameAndType        #34:#35        // out:Ljava/io/PrintStream;
  #24 = NameAndType        #8:#9          // name:Ljava/lang/String;
  #25 = Class              #36            // java/io/PrintStream
  #26 = NameAndType        #37:#38        // println:(Ljava/lang/String;)V
  #27 = Utf8               BootstrapMethods
  #28 = MethodHandle       6:#39          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #29 = String             #40            // \u0001demo
  #30 = NameAndType        #41:#42        // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
  #31 = Utf8               com/longxiongqiu/demo
  #32 = Utf8               java/lang/Object
  #33 = Utf8               java/lang/System
  #34 = Utf8               out
  #35 = Utf8               Ljava/io/PrintStream;
  #36 = Utf8               java/io/PrintStream
  #37 = Utf8               println
  #38 = Utf8               (Ljava/lang/String;)V
  #39 = Methodref          #43.#44        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #40 = Utf8               \u0001demo
  #41 = Utf8               makeConcatWithConstants
  #42 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
  #43 = Class              #45            // java/lang/invoke/StringConcatFactory
  #44 = NameAndType        #41:#49        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #45 = Utf8               java/lang/invoke/StringConcatFactory
  #46 = Class              #51            // java/lang/invoke/MethodHandles$Lookup
  #47 = Utf8               Lookup
  #48 = Utf8               InnerClasses
  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #50 = Class              #52            // java/lang/invoke/MethodHandles
  #51 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #52 = Utf8               java/lang/invoke/MethodHandles
{
  private java.lang.String name;
    descriptor: Ljava/lang/String;
    flags: (0x0002) ACC_PRIVATE
\
  public com.longxiongqiu.demo();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcom/longxiongqiu/demo;
\
  public java.lang.String getName();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: aload_0
         4: getfield      #3                  // Field name:Ljava/lang/String;
         7: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        10: aload_0
        11: dup
        12: getfield      #3                  // Field name:Ljava/lang/String;
        15: invokedynamic #5,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
        20: putfield      #3                  // Field name:Ljava/lang/String;
        23: aload_0
        24: getfield      #3                  // Field name:Ljava/lang/String;
        27: areturn
      LineNumberTable:
        line 7: 0
        line 8: 10
        line 9: 23
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      28     0  this   Lcom/longxiongqiu/demo;
}
SourceFile: "demo.java"

当class文件被classloader装载的时候，就会在jvm中保存在不同的对象中。

class文件大致可以分为四个部分：

>>> // 第一部分为这个java类基本信息，如类名，父类、继承的接口等)，
>>> // 在jvm中这部分数据保存在instanceKlass对象中。
public class com.longxiongqiu.demo
  minor version: 0
  major version: 55
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #6                          // com/longxiongqiu/demo
  super_class: #7                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 2, attributes: 3

>>> // 第二部分为常量池, 保存了这个类中所有类、字段、方法的基本信息，类似一张符号表。
>>> // 有了常量池之后，其他地方只需要用一个索引号就能得到这些信息，而不用到处保存一份。
>>> // 这一部分数据在jvm中保存在ConstantPool对象中。
Constant pool:
   #1 = Methodref          #7.#21         // java/lang/Object."<init>":()V
   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = Fieldref           #6.#24         // com/longxiongqiu/demo.name:Ljava/lang/String;
   #4 = Methodref          #25.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = InvokeDynamic      #0:#30         // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
   #6 = Class              #31            // com/longxiongqiu/demo
   #7 = Class              #32            // java/lang/Object
   #8 = Utf8               name
   #9 = Utf8               Ljava/lang/String;
  #10 = Utf8               <init>
  #11 = Utf8               ()V
  #12 = Utf8               Code
  #13 = Utf8               LineNumberTable
  #14 = Utf8               LocalVariableTable
  #15 = Utf8               this
  #16 = Utf8               Lcom/longxiongqiu/demo;
  #17 = Utf8               getName
  #18 = Utf8               ()Ljava/lang/String;
  #19 = Utf8               SourceFile
  #20 = Utf8               demo.java
  #21 = NameAndType        #10:#11        // "<init>":()V
  #22 = Class              #33            // java/lang/System
  #23 = NameAndType        #34:#35        // out:Ljava/io/PrintStream;
  #24 = NameAndType        #8:#9          // name:Ljava/lang/String;
  #25 = Class              #36            // java/io/PrintStream
  #26 = NameAndType        #37:#38        // println:(Ljava/lang/String;)V
  #27 = Utf8               BootstrapMethods
  #28 = MethodHandle       6:#39          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #29 = String             #40            // \u0001demo
  #30 = NameAndType        #41:#42        // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
  #31 = Utf8               com/longxiongqiu/demo
  #32 = Utf8               java/lang/Object
  #33 = Utf8               java/lang/System
  #34 = Utf8               out
  #35 = Utf8               Ljava/io/PrintStream;
  #36 = Utf8               java/io/PrintStream
  #37 = Utf8               println
  #38 = Utf8               (Ljava/lang/String;)V
  #39 = Methodref          #43.#44        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #40 = Utf8               \u0001demo
  #41 = Utf8               makeConcatWithConstants
  #42 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
  #43 = Class              #45            // java/lang/invoke/StringConcatFactory
  #44 = NameAndType        #41:#49        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #45 = Utf8               java/lang/invoke/StringConcatFactory
  #46 = Class              #51            // java/lang/invoke/MethodHandles$Lookup
  #47 = Utf8               Lookup
  #48 = Utf8               InnerClasses
  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #50 = Class              #52            // java/lang/invoke/MethodHandles
  #51 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #52 = Utf8               java/lang/invoke/MethodHandles

>>> // 第三部分是类的字段信息，可以根据这些信息生成这个字段在java对象保存的位置的偏移量
>>> // 这部分数据保存在jvm中的instanceKlass对象的_fileds数组中.
  private java.lang.String name;
    descriptor: Ljava/lang/String;
    flags: (0x0002) ACC_PRIVATE

>>> // 第四部分是类的方法信息，主要有方法名、访问符、需要用到的执行栈大小、局部变量个数和大小和入参个数。
>>> // 以及最重要的字节码指令。
>>> // 这部分数据保存在jvm中的instanceKlass对象的_methods数组中
  public com.longxiongqiu.demo();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcom/longxiongqiu/demo;
\
  public java.lang.String getName();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: aload_0
         4: getfield      #3                  // Field name:Ljava/lang/String;
         7: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        10: aload_0
        11: dup
        12: getfield      #3                  // Field name:Ljava/lang/String;
        15: invokedynamic #5,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
        20: putfield      #3                  // Field name:Ljava/lang/String;
        23: aload_0
        24: getfield      #3                  // Field name:Ljava/lang/String;
        27: areturn
      LineNumberTable:
        line 7: 0
        line 8: 10
        line 9: 23
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      28     0  this   Lcom/longxiongqiu/demo;
}