Java对原子操作和内存屏障的封装
===================================

.. note::

    jdk11，jvm为hotspot，硬件和系统平台为x86/linux

原子操作
--------------

代码路径位于src/hotspot/os_cpu/linux_x86/atomic_linux_x86.hpp

.. code-block:: c++

    template<>
    template<typename I, typename D>
    inline D Atomic::PlatformAdd<4>::fetch_and_add(I add_value, D volatile* dest,
                                               atomic_memory_order order) const {
        STATIC_ASSERT(4 == sizeof(I));
        STATIC_ASSERT(4 == sizeof(D));
        D old_value;
        __asm__ volatile (  "lock xaddl %0,(%2)"
                    : "=r" (old_value)
                    : "0" (add_value), "r" (dest)
                    : "cc", "memory");
        return old_value;
    }

        template<>
        template<typename T>
        inline T Atomic::PlatformXchg<4>::operator()(T exchange_value,
                                             T volatile* dest,
                                             atomic_memory_order order) const {
        STATIC_ASSERT(4 == sizeof(T));
        __asm__ volatile (  "xchgl (%2),%0"
                    : "=r" (exchange_value)
                    : "0" (exchange_value), "r" (dest)
                    : "memory");
        return exchange_value;
    }

    template<>
    template<typename T>
    inline T Atomic::PlatformCmpxchg<1>::operator()(T exchange_value,
                                                T volatile* dest,
                                                T compare_value,
                                                atomic_memory_order /* order */) const {
    STATIC_ASSERT(1 == sizeof(T));
    __asm__ volatile ("lock cmpxchgb %1,(%3)"
                    : "=a" (exchange_value)
                    : "q" (exchange_value), "a" (compare_value), "r" (dest)
                    : "cc", "memory");
    return exchange_value;
    }


内存屏障
--------------

代码路径位于src/hotspot/os_cpu/linux_x86/orderAccess_linux_x86.hpp

.. code-block:: c++

    // Implementation of class OrderAccess.

    // A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions
    static inline void compiler_barrier() {
        __asm__ volatile ("" : : : "memory");
    }

    inline void OrderAccess::loadload()   { compiler_barrier(); }
    inline void OrderAccess::storestore() { compiler_barrier(); }
    inline void OrderAccess::loadstore()  { compiler_barrier(); }
    inline void OrderAccess::storeload()  { fence();            }

    inline void OrderAccess::acquire()    { compiler_barrier(); }
    inline void OrderAccess::release()    { compiler_barrier(); }

    inline void OrderAccess::fence() {
    // always use locked addl since mfence is sometimes expensive
        __asm__ volatile ("lock; addl $0,0(%%esp)" : : : "cc", "memory");
        compiler_barrier();
    }

    template<>
    struct OrderAccess::PlatformOrderedStore<1, RELEASE_X_FENCE>
    {
        template <typename T>
        void operator()(T v, volatile T* p) const {
        __asm__ volatile (  "xchgb (%2),%0" // 写一个字节，对所有处理器有序和全局可见
                      : "=q" (v)
                      : "0" (v), "r" (p)
                      : "memory");
        }
    };

    template<>
    struct OrderAccess::PlatformOrderedStore<2, RELEASE_X_FENCE>
    {
        template <typename T>
        void operator()(T v, volatile T* p) const {
        __asm__ volatile (  "xchgw (%2),%0" // 写两个字节，对所有处理器有序和全局可见
                      : "=r" (v)
                      : "0" (v), "r" (p)
                      : "memory");
        }
    };

    template<>
    struct OrderAccess::PlatformOrderedStore<4, RELEASE_X_FENCE>
    {
        template <typename T>
        void operator()(T v, volatile T* p) const {
        __asm__ volatile (  "xchgl (%2),%0" // 写四个字节，对所有处理器有序和全局可见
                      : "=r" (v)
                      : "0" (v), "r" (p)
                      : "memory");
        }
    };

可以看到hotspot实现的原子操作和内存屏障就是使用了x86处理器提供的能力。
原子操作和内存屏障使用的是锁指令来实现java的原子性操作和保证代码执行有序和可见性。

