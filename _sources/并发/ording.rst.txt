乱序和可见
==========================

.. note::

    给予X86架构讨论

内存顺序
------------

内存顺序是处理器通过系统总线处理读内存和写内存的顺序。Intel的处理器支持两种内存顺序模型：

1. **program ording**：处理器执行指令顺序和程序的顺序一样（也叫strong ording）。
2. **processor ording**：为了优化指令执行性能，处理器执行指令顺序可能和程序不一致，如乱序执行。

program ording没有什么说的，这里讨论X86支持的processor ording。

对于processor ording来说，有四种乱序：

1. loadload乱序
2. loadstore乱序
3. storeload乱序
4. storestore乱序

loadload乱序
----------------------

.. code-block:: c++

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, b;
        load r2, a;
    }

1. CPU2发生loadload乱序，先load a，此时a的值还未写入，r2=0。
2. CPU1执行store a，此时a=1。
3. CPU1执行store b，此时b=1。
4. CPU2执行load b，此时b=1，所以r1=1。

所以发生loadload乱序的情况，出现了r1=1，r2=0。如果在没有乱序的情况下，不可能会出现r1=1，r2=0的情况。

loadstore乱序
--------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        load r1, a;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r2, b;
        store a, 1;
    }

1. CPU1发生了loadstore乱序，先执行store b。此时b=1
2. CPU2执行load b，此时r2=1。
3. CPU1执行load a，此时r1=0.
4. CPU2执行store a，此时a=1。

所以在loadstore乱序的情况下，出现了r1=0，r2=1。如果在没有乱序的情况下，不可能会出现r1=0，r2=1的情况。

storestore乱序
----------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, b;
        load r2, a;
    }

1. CPU1发生了storestore乱序，先执行store b。此时b=1
2. CPU2执行load b，此时r1=1。
3. CPU2执行load a，此时r2=0.
4. CPU1执行store a，此时a=1。

所以在loadstore乱序的情况下，出现了r1=1，r2=0的情况。如果在没有乱序的情况下，不可能会出现r1=1，r2=0的情况。
所以在多核的情况下，不能根据b=1来判断a也为1了，也就是不能根据b=1来作为标志，表示前面的数据都准备好了。

storeload乱序
--------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        load r1, b;
    }

    #on CPU2
    void bar(void){
        store b, 1;
        load r2, a;
    }

1. CPU1发生了storeload乱序，先执行了load b。此时r1=0。
2. CPU2执行store b，此时b=1。
3. CPU2执行load a，此时r2=0.
4. CPU1执行store a，此时a=1。

所以在storeload乱序的情况下，出现了r1=0，r2=0的情况。如果在没有乱序的情况下，不可能会出现r1=0，r2=0的情况。

为什么会出现乱序
-----------------------

乱序的出现就是优化指令执行的效率，提升CPU性能，但是乱序的前提是要保证该线程在CPU中执行的正确性，保证线程的
执行效果和在没有乱序的执行效果一样。

#loadload内存屏障
-----------------------

.. code-block:: c++

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, b;
        #loadload
        load r2, a;
    }

CPU2加了#loadload屏障后，屏障后面的load指令不会执行，直到屏障前面的load指令执行完成。

#loadstore内存屏障
--------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        load r1, a;
        #loadstore
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r2, b;
        store a, 1;
    }

#loadstore屏障保证了屏障后面的store指令等待屏障前面的load指令执行完成后才会执行

#storestore内存屏障
----------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, b;
        load r2, a;
    }

#storestore屏障保证了屏障后面的store指令要等到屏障前面的store指令执行完成后才会执行。

#storeload内存屏障
--------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        #storeload
        load r1, b;
    }

    #on CPU2
    void bar(void){
        store b, 1;
        load r2, a;
    }

#storeload屏障保证了屏障后面的load指令要等到屏障前面的store指令执行完成后才会执行。

缓存一致性
------------------------

现代CPU引入了多级缓存来加速CPU访问内存的速度。CPU如果出现cache hit的时候会直接从缓存中读取数据，还不用去内存中。
因为CPU的缓存是独立的，所以就需要来维护缓存数据的一致。

因为store操作可能会等待很久（可能需要发送invalid命令使其他CPU上的缓存失效，这可能要等待很久。），所以为了加速执行速度，
又引入store buffer结构，把store操作写到store buffer中，然后就马上返回执行下面的命令。等后续有时间了，在把store buffer中，然后就马上返回执行下面的命令。等后续有时间了，在把store
中的数据写入到缓存和内存中。

缓存一直性协议和store buffer请参考下面的论文。

`Memory Barriers: a Hardware View for Software Hackers <http://www.puppetmastertrading.com/images/hwViewForSwHackers.pdf>`_


局部可见（有序的）和全局可见（乱序的）
----------------------------------------

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, a
        load r2, b;
    }

1. CPU1执行store a，假设写到了store buffer中。
2. CPU1执行store b，写到了缓存中。
3. CPU2执行load a，从缓存中读取a的数据，此时只能读到a的旧值0，所以r1=0。
4. CPU2执行load b，从缓存中读取到了b的新值1，所以r2=1。

因为引入了缓存和store buffer结构，出现了不同CPu读到的值不一致的情况。store a的执行结果全局不可见，只能在执行
该操作的CPU1可见，因为在该CPU1中如果执行load a，由于store buffer forwarding，能够直接从store buffer中读取，所以能够
读取到新值。而对于其他CPU来讲是不可见的。

1. 在执行store a的CPU1来看，store a和store b是顺序执行的（有序的）。
2. 在其他CPU中来看，store b早于store a执行，是乱序执行的（乱序的）。因为现在能够读取到b的新值，还读取不到a的新值。

对于多核环境来讲，在单核时代看似正确的事情，由于多核的环境，对于其他CPU来讲，结果就会出现问题。

.. code-block:: c

    int a = 0;
    int b = 0;

    #on CPU1
    void foo(void){
        store a, 1;
        #storestore
        store b, 1;
    }

    #on CPU2
    void bar(void){
        load r1, a
        load r2, b;
    }

如果在store a和store b之间加上一个#storestore内存屏障，那么问题就能解决了。

#storestore屏障保证了屏障后面的store在执行前，屏障前面的store操作都会执行完成，屏障会等待store buffer中的数据
写到缓存中。这样其他CPU在读取的时候，就能通过缓存读取到最新的数据。此时所有CPU看到的效果都是一样的，

.. note::

    所以根据前面的讨论，内存屏障具有防止指令和保证可见的的功能。其实可见问题应该也是一种由于其他CPU和执行指令的CPU看到
    的顺序不一致的一种乱序行为。内存屏障不光能防止执行指令的CPU的顺序，还能保证其他CPU看到的顺序和本CPU是一致的
    （执行效果在不同CPU看到的都是一致的，视图一致）。

    所以内存屏障具有在多核处理器之间，保证了全局的内存一致性。


X86内存顺序（TSO）
--------------------

In a single-processor system for memory regions defined as write-back cacheable, 
the memory-ordering model respects the following principles 

1. Reads are not reordered with other reads.(不支持loadload乱序)
2. Writes are not reordered with older reads.(不支持loadstore乱序)
3. Writes to memory are not reordered with other writes.(不支持storestore乱序)
4. Reads may be reordered with older writes to different locations but not with older 
    writes to the same location.(对于load核stroe不同内存地址，支持storeload乱序)
5. Reads or writes cannot be reordered with I/O instructions, locked instructions, 
    or serializing instructions.(IO指令、lock指令和串行指令由屏障语义，会阻止这些指令前后的load核store乱序)
6. Reads cannot pass earlier LFENCE and MFENCE instructions.
7. LFENCE instructions cannot pass earlier reads.
8. SFENCE instructions cannot pass earlier writes.
9. MFENCE instructions cannot pass earlier reads, writes.

In a multiple-processor system, the following ordering principles apply:

1. Individual processors use the same ordering principles as in a single-processor system.
2. Writes by a single processor are observed in the same order by all processors.
3. Writes from an individual processor are NOT ordered with respect to the writes from other processors.
4. Memory ordering obeys causality (memory ordering respects transitive visibility).
5. Any two stores are seen in a consistent order by processors other than those performing the stores
6. Locked instructions have a total order

x86只支持storeload的乱序。

X86具有内存屏障语义的指令
------------------------------

X86架构中常见具有内存屏障语义的指令有：

::

    The locking instructions, the LOCK prefix, and serializing instructions force 
    stronger ordering on the processor。
    
    The SFENCE instruction (introduced to the IA-32 architecture in the Pentium III processor) 
    and the LFENCE and MFENCE instructions (introduced in the Pentium 4 processor) provide 
    memory-ordering and serialization capabilities for specific types of memory operations.

使用加锁指令和LOCK前缀保证有序
---------------------------------------

::

    Synchronization mechanisms in multiple-processor systems may depend upon a 
    strong memory-ordering model. Here, a program can use a locking instruction such as the XCHG 
    instruction or the LOCK prefix to ensure that a read-modify-write operation on memory is carried 
    out atomically. Locking operations typically operate like I/O operations in that they wait 
    for all previous instructions to complete and for all buffered writes to drain to memory 

使用加锁指令和LOCK前缀能够保证指令本身的串行，而且会等待之前的所有指令完成，数据写会到内存中，保证了strong ording。

除了给每条指令加锁之外，还有插入一条额外的和功能无关的加锁指令的方。在这条加锁指令执行之前，
该指令之前的所有数据操作都生效了，该指令仅仅就是为了保证操作串行的功能，和业务无关。如：
::

    lock addl $0,0(%%esp)


当执行到lock addl这条指令的时候，该指令之前的store和load指令都完成了，store buffer中数据也写到了内存中。
lock addl $0,0(%%esp)这条指令是往esp寄存器指向的内存地址加0操作，也就是啥也没干，这条指令只是为了不让指令乱序执行，
保证了该指令前的其他指令不会跨过lock指令，在该lock指令之后执行，且之前的数据已经写入内存了。

加锁这种做法缺点就是会影响处理器执行性能。每条指令都加锁，会锁住内存总线或cache line，影响其他核执行指令。

使用串行指令来保证有序
------------------------------

::

    Program synchronization can also be carried out with serializing instructions. 
    These instructions are typically used at critical procedure or task boundaries to force 
    completion of all previous instructions before a jump to a new section of code or a context 
    switch occurs. Like the I/O and locking instructions, the processor waits until all previous 
    instructions have been completed and all buffered writes have been drained to memory before
    executing the serializing instruction.

串行指令保证了处理器在执行下一条指令之前，串行指令前面的所有指令都已经完成了，寄存器的更改都完成了，缓存数据都写到内存中去了。
对于程序开发来说，常见的串行指令是
**CPUID**，处理器也提供了其他串行指令，但是大部分都是在高优先级中使用，给内核使用的。

使用内存屏障指令保证有序
------------------------------------

::

    The SFENCE, LFENCE, and MFENCE instructions provide a performance-efficient way of ensuring 
    load and store memory ordering between routines that produce weakly-ordered results and 
    routines that consume that data. The functions of these instructions are as follows:

    • SFENCE — Serializes all store (write) operations that occurred prior to the SFENCE 
    instruction in the program instruction stream, but does not affect load operations.

    • LFENCE — Serializes all load (read) operations that occurred prior to the LFENCE 
    instruction in the program instruction stream, but does not affect store operations.

    • MFENCE — Serializes all store and load operations that occurred prior to the 
    MFENCE instruction in the program instruction stream.

    Note that the SFENCE, LFENCE, and MFENCE instructions provide a more efficient method 
    of controlling memory ordering than the CPUID instruction.

内存屏障指令（memory-ording instruction）有SFENCE, LFENCE, MFENCE。内存屏障指令提供了更细粒度的内存操作能力

1. SFENCE - 能够串行SFENCE指令前的所有写内存操作，保证SFENCE指令前的写操作全部完成, 但是不影响读操作。
   在执行SFENCE的时候, 之前的写操作全部完成，

2. LFENCE - 能够串行LFENCE指令前的所有读内存操作,保证LFENCE指令前的读操作全部完成, 但是不影响写操作.
3. MFENCE - 能够串行MFENCE指令前的所有读写内存操作。

虽然不支持loadload乱序，且x86没有invalid queue，但还是提供了LFENCE屏障（该屏障有其他用途）：

::

    Specifically, LFENCE does not execute until all prior instructions have completed locally, 
    and no later instruction begins execution until LFENCE completes. As a result, 
    an instruction that loads from memory and that precedes an LFENCE receives data from memory 
    prior to completion of the LFENCE. An LFENCE that follows an instruction that stores to 
    memory might complete before the data being stored have become globally visible. 
    Instructions following an LFENCE may be fetched from memory before the LFENCE, but
    they will not execute until the LFENCE completes.


举例
----------

以java的hotspot虚拟机实现为例,看hotspot是怎么实现屏障的。

.. code-block:: c++

    // A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions
    static inline void compiler_barrier() {
    __asm__ volatile ("" : : : "memory");
    }

    inline void OrderAccess::loadload()   { compiler_barrier(); }
    inline void OrderAccess::storestore() { compiler_barrier(); }
    inline void OrderAccess::loadstore()  { compiler_barrier(); }
    inline void OrderAccess::storeload()  { fence();            }
    inline void OrderAccess::acquire()    { compiler_barrier(); }
    inline void OrderAccess::release()    { compiler_barrier(); }

    inline void OrderAccess::fence() {
    // always use locked addl since mfence is sometimes expensive
    __asm__ volatile ("lock; addl $0,0(%%esp)" : : : "cc", "memory");
    compiler_barrier();
    }

在hotspot中，因为屏障指令开销大，是用lock指令来实现屏障的。compiler_barrier是一条空的指令，这个是编译器屏障，
告诉编译器不要进行指令重排序优化。

可以看到因为x86只支持storeload乱序，其他类型的乱序都是用编译器屏障。实际执行的时候，不会插入任何额外的指令，因为处理器
保证了不会乱序。

**参考资料**

`Intel® 64 and IA-32 Architectures Software Developer's Manual Volume 3A: System Programming Guide, Part 1 <https://software.intel.com/en-us/download/intel-64-and-ia-32-architectures-sdm-volume-3a-system-programming-guide-part-1>`_

`Memory Barriers: a Hardware View for Software Hackers <http://www.puppetmastertrading.com/images/hwViewForSwHackers.pdf>`_
